from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd

#Read farmer_advisor_dataset.csv file
farmer_advisor_df =  pd.read_csv(farmer_advisor_dataset.csv)

#Read market_researcher_dataset.csv file
market_researcher_df =  pd.read_csv(market_researcher_dataset.csv)

#Displaying first five rows or records of farmer advisor dataset
farmer_advisor_df.head()

#Displaying first five rows or records of market researcher dataset
market_researcher_df.head()

# Encode categorical variable
le = LabelEncoder()
farmer_advisor_df['Crop_Type'] = le.fit_transform(farmer_advisor_df['Crop_Type'])

# Farmer Advisor Model: Predict Crop_Yield and Sustainability_Score
X_farm = farmer_advisor_df.drop(['Crop_Yield_ton', 'Sustainability_Score', 'Farm_ID'], axis=1)
y_yield = farmer_advisor_df['Crop_Yield_ton']
y_sustainability = farmer_advisor_df['Sustainability_Score']

X_train_farm, X_test_farm, y_train_yield, y_test_yield = train_test_split(X_farm, y_yield, test_size=0.2, random_state=42)
model_yield = RandomForestRegressor()
model_yield.fit(X_train_farm, y_train_yield)

y_pred_yield = model_yield.predict(X_test_farm)
print("Crop Yield Prediction RMSE:", np.sqrt(mean_squared_error(y_test_yield, y_pred_yield)))

# Sustainability Model
y_train_sus, y_test_sus = train_test_split(y_sustainability, test_size=0.2, random_state=42)
model_sus = RandomForestRegressor()
model_sus.fit(X_train_farm, y_train_sus)
y_pred_sus = model_sus.predict(X_test_farm)
print("Sustainability Score RMSE:", np.sqrt(mean_squared_error(y_test_sus, y_pred_sus)))

# Market Researcher Model
X_market = market_researcher_df.drop(['Market_ID', 'Product', 'Market_Price_per_ton'], axis=1)
y_market = market_researcher_df['Market_Price_per_ton']

X_train_mkt, X_test_mkt, y_train_mkt, y_test_mkt = train_test_split(X_market, y_market, test_size=0.2, random_state=42)
model_market = RandomForestRegressor()
model_market.fit(X_train_mkt, y_train_mkt)

y_pred_mkt = model_market.predict(X_test_mkt)
print("Market Price Prediction RMSE:", np.sqrt(mean_squared_error(y_test_mkt, y_pred_mkt)))
